def terraform(terraform_dir) {
    dir(terraform_dir) {
        try {
            if (params.terraform_action == 'apply') {
                sh"""
                terraform init \
                    -backend-config="access_key=${AWS_ACCESS}" \
                    -backend-config="secret_key=${AWS_SECRET}"
                terraform apply -auto-approve
                """
            } else if (params.terraform_action == 'destroy'){
                sh"""
                terraform init \
                    -backend-config="access_key=${AWS_ACCESS}" \
                    -backend-config="secret_key=${AWS_SECRET}"
                terraform destroy -auto-approve
                """
            }
        } catch (Exception e) {
            echo "❌ Terraform failed in directory: ${terraform_dir}"
            echo "Error: ${e.message}"
            throw e 
        }
        
    }
}

def ansible(ansible_dir, inventory, playbook, credentials) {
    dir("${ansible_dir}") {
        withCredentials([sshUserPrivateKey(credentialsId: credentials, keyFileVariable: 'ANSIBLE_KEY')]) {
            try {
                echo "Installing ansible dependencies..."
                sh 'ansible-galaxy collection install -r requirements.yaml'

                echo "Installing k8s..."
                sh """
                    ansible-playbook \\
                        -i ${inventory} \\
                        --private-key "\$ANSIBLE_KEY" \\
                        --user vlad \\
                        --ssh-extra-args "-o StrictHostKeyChecking=no" \\
                        ${playbook}
                """
            } catch (Exception e) {
                echo "❌ ansible failed in directory: ${ansible_dir}"
                echo "Error: ${e.message}"
                throw e
            }
        }
    }
}

pipeline {
    agent any
    environment {
        AWS_ACCESS = credentials('aws_access_key_id')
        AWS_SECRET = credentials('aws_secret_access_key')
    }
    tools {
        terraform "terraform_1.13.4"
        ansible 'ansible-latest'
    }


    parameters {
        choice choices: ['apply', 'destroy'], description: 'Terraform action', name: 'terraform_action'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/vladoz77/terraform.git'
            }
        }

        stage('config terraform') {
            steps {
                sh '''
                    echo "Creating ~/.terraformrc for Yandex Cloud mirror"
                    cat > ~/.terraformrc <<EOF
                    provider_installation {
                        network_mirror {
                            url = "https://terraform-mirror.yandexcloud.net/"
                            include = ["registry.terraform.io/*/*"]
                        }
                        direct {
                            exclude = ["registry.terraform.io/*/*"]
                        }
                    }
                '''
            }
        }

        stage('Terraform Apply or Destroy') {
            steps {
                script {
                    terraform('lxd-k8s/terraform/infrastucture')
                }
            }
        }

        stage('Configure Kubernetes with Ansible') {
            when {
                expression { params.terraform_action == 'apply' }
            }
            steps {
                script {
                    ansible('lxd-k8s/ansible', 'inventory.ini', 'install-k8s.yaml', 'vlad-ssh-key')
                }
            }
        }

        stage('Install or destroy base k8s applications'){
            when {
                expression { params.terraform_action == 'apply' }
            }
            steps {
                script{
                    terraform('lxd-k8s/terraform/k8s-applications')
                }
            }
        }
    }
}