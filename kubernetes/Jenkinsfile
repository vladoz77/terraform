pipeline {
    agent any
    tools {
        terraform 'terraform'
    }
    environment {
        AWS_ACCESS = credentials('aws_access_key_id')
        AWS_SECRET = credentials('aws_secret_access_key')
        CLOUD_ID   = credentials('cloud_id')
        FOLDER_ID  = credentials('folder_id')
        IAM_TOKEN  = credentials('iam_token')
    }

    parameters {
        choice choices: ['apply', 'destroy'], description: 'apply or destroy terraform', name: 'action'
    }
    
    stages{
        
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/vladoz77/terraform'
            }
        }


        stage('config terraform') {
            steps {
                sh '''
                    echo "Creating ~/.terraformrc for Yandex Cloud mirror"
                    cat > ~/.terraformrc <<EOF
                    provider_installation {
                        network_mirror {
                            url = "https://terraform-mirror.yandexcloud.net/"
                            include = ["registry.terraform.io/*/*"]
                        }
                        direct {
                            exclude = ["registry.terraform.io/*/*"]
                        }
                    }
                '''
            }
        }

        

        stage('terraform init') {
            steps {
                dir("kubernetes/infrastucture") {
                    sh '''
                    terraform init \
                        -backend-config="access_key=${AWS_ACCESS}" \
                        -backend-config="secret_key=${AWS_SECRET}"
                    '''
                }
            }
        }


        stage('terraform plan') {
            steps {
                dir("kubernetes/infrastucture") {
                    sh '''
                    export AWS_ACCESS_KEY_ID="${AWS_ACCESS}"
                    export AWS_SECRET_ACCESS_KEY="${AWS_SECRET}"
                    export TF_VAR_ssh_key=$(cat /home/${USER}/.ssh/id_rsa.pub)

                    terraform plan  \
                            -var "cloud_id=${CLOUD_ID}" \
                            -var "folder_id=${FOLDER_ID}" \
                            -var "token=${IAM_TOKEN}"
                    '''
                }
            }
        }

        stage('terraform apply') {
            steps {
                script{
                    if (params.action == 'apply') {
                        dir("kubernetes/infrastucture") {
                            sh'''
                            export AWS_ACCESS_KEY_ID="${AWS_ACCESS}"
                            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET}"
                            export TF_VAR_ssh_key=$(cat /home/${USER}/.ssh/id_rsa.pub)

                            terraform apply -auto-approve \
                                -var "cloud_id=${CLOUD_ID}" \
                                -var "folder_id=${FOLDER_ID}" \
                                -var "token=${IAM_TOKEN}"
                            '''
                        }
                        
                    } else if (params.action == 'destroy') {
                        dir("kubernetes/infrastucture") {
                            sh'''
                            export AWS_ACCESS_KEY_ID="${AWS_ACCESS}"
                            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET}"
                            export TF_VAR_ssh_key=$(cat /home/${USER}/.ssh/id_rsa.pub)

                            terraform destroy -auto-approve \
                                -var "cloud_id=${CLOUD_ID}" \
                                -var "folder_id=${FOLDER_ID}" \
                                -var "token=${IAM_TOKEN}"
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                if (params.action == 'apply') {
                archiveArtifacts artifacts: 'kubernetes/infrastucture/kubeconfig'
                } else {
                    echo "ℹ️ Сборка 'destroy' — архивация kubeconfig пропущена"
                }
            }
        }
        always {
            sh 'rm -f kubernetes/infrastucture/sa-k8s-key.json'
        }
        
    }
}
