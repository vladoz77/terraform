// Define where to send logs for storage
prometheus.remote_write "prometheus" {
  endpoint {
    url = "https://prometheus.mon.home-local.site/api/v1/write"
  }
}

loki.write "loki" {
  endpoint {
    url = "http://loki.mon.home-local.site/loki/api/v1/push"
    batch_size = "1MiB"
    batch_wait = "2s"
  }
  
}
{% if alloy_enable_docker %}
// Exposes Docker targets using the docker socket
prometheus.exporter.cadvisor "docker" {
  docker_host = "unix:///var/run/docker.sock"
  storage_duration = "5m"
}

prometheus.scrape "docker" {
  targets    =  prometheus.exporter.cadvisor.docker.targets
  // pushes them to the relabeler
  forward_to = [prometheus.relabel.docker_relabel.receiver]
}

// Adds container labels and metadata
prometheus.relabel "docker_relabel" {
  rule {
    target_label = "container"
    source_labels = [
      "name",
    ]
  }
  
  rule {
    target_label = "job"
    replacement = "docker-metrics"
  }
  
  forward_to = [prometheus.remote_write.prometheus.receiver]
}
{% endif %}

// System metrics
prometheus.exporter.unix "metrics" {
  disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
  enable_collectors = ["meminfo"]

  filesystem {
    fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
    mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
    mount_timeout        = "5s"
  }

  netclass {
    ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }

  netdev {
    device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
  }
}

prometheus.scrape "linux_node" {
  scrape_interval = "15s"
  targets = prometheus.exporter.unix.metrics.targets
  forward_to = [
    prometheus.relabel.metrics.receiver,
  ]
}


prometheus.relabel "metrics" {
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }

  rule {
    target_label = "job"
    replacement = "linux-node"
  }
  
  forward_to = [prometheus.remote_write.prometheus.receiver]
}

{% if alloy_enable_grafana %}
// Scrape grafana
prometheus.scrape "grafana" {
	targets = [
		{
			"__address__"      = "grafana:3000",
			"__scheme__"       = "http",
			"__metrics_path__" = "/metrics",
		},
	]

	scrape_interval = "15s"
  job_name = "grafana"

	forward_to = [prometheus.remote_write.prometheus.receiver]
}
{% endif %}


// System logs config
loki.source.journal "journal" {
  max_age    = "12h0m0s"
  forward_to = [loki.write.loki.receiver]
  path          = "/var/log/journal"
  relabel_rules = loki.relabel.journal.rules
}

loki.relabel "journal" {
  forward_to = []
  rule {
    source_labels = ["__journal__systemd_unit"]
    regex         = "^(docker|containerd|kubelet|nginx|postgresql|sshd|fail2ban|alloy)\\.service$"
    action        = "keep"
  }

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    source_labels = ["__journal__boot_id"]
    target_label  = "boot_id"
  }
  rule {
    source_labels = ["__journal__transport"]
    target_label  = "transport"
  }
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
  rule {
    target_label = "job"
    replacement  = "systemd-journal"
  }
}

loki.source.file "system" {
  targets    = local.file_match.system.targets
  forward_to = [loki.write.loki.receiver]
}

local.file_match "system" {
  path_targets = [
    {
      __address__ = "localhost",
      __path__    = "/var/log/messages",
      job         = "system-logs",
      log_type    = "messages",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/secure",
      job         = "system-logs",
      log_type    = "secure",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/cron",
      job         = "system-logs",
      log_type    = "cron",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/boot.log",
      job         = "system-logs",
      log_type    = "boot",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/auth.log",
      job         = "system-logs",
      log_type    = "auth",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/syslog",
      job         = "system-logs",
      log_type    = "syslog",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/fail2ban.log",
      job         = "system-logs",
      log_type    = "fail2ban",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/nginx/access.log",
      job         = "system-logs",
      log_type    = "nginx",
      instance    = constants.hostname,
    },
    {
      __address__ = "localhost",
      __path__    = "/var/log/dnf.log",
      job         = "system-logs",
      log_type    = "dnf",
      instance    = constants.hostname,
    },
  ]
}

{% if alloy_enable_docker %}
// Docker logs config
discovery.docker "dockerlogs" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "dockerlogs" {
  targets = discovery.docker.dockerlogs.targets
  
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex = "/(.*)"
    target_label = "container_name"
  }
  
  rule {
    source_labels = ["__meta_docker_container_image"]
    target_label = "container_image"
  }
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.dockerlogs.targets
  labels     = {"platform" = "docker"}
  relabel_rules = discovery.relabel.dockerlogs.rules
  forward_to = [loki.write.loki.receiver]
}
{% endif %}
// Enable live debugging features (empty config means use defaults)
livedebugging{}
