- name: check if folder exist in local
  delegate_to: localhost
  become: no
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/certificates/{{ cert_name }}"
  register: local_cert

- ansible.builtin.set_fact:
    skip_cerbot: "{{ local_cert.stat.exists  and local_cert.stat.isdir  }}"

- ansible.builtin.debug:
    var: skip_cerbot

- name: Ensure certificate directory exists on remote host
  ansible.builtin.file:
    path: "/etc/letsencrypt/live/{{ cert_name }}"
    state: directory
    mode: '0755'
  when: skip_cerbot

- name: Copy existing certificates from project dir to server
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/certificates/{{ cert_name }}/{{ item }}"
    dest: "/etc/letsencrypt/live/{{ cert_name }}/"
    mode: "0644"
  loop:
  - cert.pem
  - chain.pem
  - fullchain.pem
  - privkey.pem
  when: skip_cerbot

- name: Create and save certificate
  block:
  - name: create certificate
    ansible.builtin.shell: |
      certbot certonly \
      --non-interactive \
      --nginx \
      --email {{ email }} \
      --expand \
      --agree-tos \
      --cert-name {{ cert_name }} \ 
      -d {{ domains | join(' -d ') }} > /tmp/certbot.log 2>&1

  - name: Setup certbot auto renew
    ansible.builtin.cron:
      name: "Renew Let's Encrypt certificate"
      minute: "{{ certbot_renew_minutes }}"
      hour: "{{ certbot_renew_hours }}"
      job: "certbot renew --quiet --deploy-hook 'systemctl reload nginx'"
      state: present

  - name: save certificate on local
    ansible.builtin.fetch:
      src: "/etc/letsencrypt/live/{{ cert_name }}/{{ item }}"
      dest: "{{ playbook_dir }}/certificates/{{ cert_name }}/{{ item }}"
      remote_src: true
      flat: yes
    loop:
    - cert.pem
    - chain.pem
    - fullchain.pem
    - privkey.pem
  when: skip_cerbot == false
